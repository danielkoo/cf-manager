#!/usr/bin/env node

'use strict';

var aws = require('aws-sdk');
var argv = require('yargs').argv;
var Table = require('cli-table');
var fs = require('fs');
if(argv.hasOwnProperty('profile'))
	var profileToUse = argv.profile;
else
	var profileToUse = 'default';
var credentials = new aws.SharedIniFileCredentials({profile: profileToUse});
aws.config.credentials = credentials;

if(argv.hasOwnProperty('region'))
	var regionToUse = argv.region;
else
	var regionToUse = 'ap-southeast-2';
var ec2 = new aws.EC2({region: regionToUse});

var constructed=[];
var table = new Table({
    head: ['','Name','Status','Creation Time']
  , colWidths: [5,50,20,50]
});
function usage()
{
	console.log("Usage");
	console.log("---------------------------------------------------------");
	console.log(process.argv[1] + " --action action [--profile profileName] [--region awsRegion] [--filterByStatus status] [--pattern pattern] [--help]");
	console.log("action: Action to perform ,currently supported : list , delete");
	console.log("profile: AWS profile to use, defaults to 'default' profile");
	console.log("region: AWS region to use, defaults to 'ap-southeast-2'");
	console.log("stepThrough: Performs action by stepping through each CloudFormation stack with prompt for confirmation, only applicable for delete action");
	console.log("filterByStatus: Filter by AWS CloudFormation status");
	console.log("pattern: Matching pattern, '*' wildcard supported");
	console.log("help: Display this usage message");
}

if(argv.hasOwnProperty('help')){
	usage();
	process.exit(0);
}

if(!argv.hasOwnProperty('action')){
	console.log("Please specify an action. Run "+ process.argv[1] +" --help for usage.");
	process.exit(1);
}

var cf = new aws.CloudFormation({region:regionToUse});

var params = {};


if(argv.hasOwnProperty('filterByStatus')){
	var filters = argv.filterByStatus.split(",");
	params.StackStatusFilter = filters;
}
var foundStacks = [];
cf.listStacks(params, function(err,data){
	if(err)
	{
		console.log(err);
	}
	else {
		if(typeof data.StackSummaries !== 'undefined'){
			for(var i=0;i<data.StackSummaries.length;i++){
				if(argv.hasOwnProperty('pattern')){
					if(data.StackSummaries[i].StackName.match(argv.pattern) !== null){
						foundStacks.push(data.StackSummaries[i]);
					}
				}
				else{
						foundStacks.push(data.StackSummaries[i]);
				}
			}
			var numCounter =0;
			console.log("Number of stacks found : "+foundStacks.length);
			for(var i=0;i<foundStacks.length;i++){
				table.push([++numCounter,foundStacks[i].StackName,foundStacks[i].StackStatus,foundStacks[i].CreationTime]);
			}
			console.log(table.toString());
			/*switch(argv.action){
				case 'list':
					process.exit(0);
					break;
				case 'delete':


			}*/
			
		}
	}
});